#cloud-config
<%#
kind: snippet
name: coreos_cloudconfig
%>

<%#
Note! This is a snippet that gets transcluded into "CoreOS provision".
For that to work, the whole file needs to be indented by EXACTLY six
spaces.
%>
      # coreos_cloudconfig.erb $Id$
      hostname: <%= @host.name %>
      coreos:
        etcd2:
          name: <%= @host.name %>
<% if @host.params['etcd_discovery_url'] -%>
          # generate a new token for each unique cluster from https://discovery.etcd.io/new
          discovery: <%= @host.params['etcd_discovery_url'] %>
<% end -%>
          # multi-region and multi-cloud deployments need to use $public_ipv4
          advertise-client-urls: http://<%= @host.ip %>:2379
          initial-advertise-peer-urls: http://<%= @host.ip %>:2380
          # listen on both the official ports and the legacy ports
          # legacy ports can be omitted if your application doesn't depend on them
          listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
          listen-peer-urls: http://<%= @host.ip %>:2380,http://<%= @host.ip %>:7001
        fleet:
          public-ip: <%= @host.ip %>
          metadata: region=<%= @host.params['etcd_region'] %>
        units:
          - name: etcd2.service
            command: start
          - name: fleet.service
            command: start
          - name: docker-tcp.socket
            command: start
            enable: yes
            content: |
              [Unit]
              Description=Docker Socket for the API
              
              [Socket]
              ListenStream=2375
              BindIPv6Only=both
              Service=docker.service
              
              [Install]
              WantedBy=sockets.target
          - name: enable-docker-tcp.service
            command: start
            content: |
              [Unit]
              Description=Enable the Docker Socket for the API
              
              [Service]
              Type=oneshot
              ExecStart=/usr/bin/systemctl enable docker-tcp.socket
<%# Keep in sync with same in ../coreos/provision.erb %>
          - name: puppet.service
            command: start
            content: |
              [Unit]
              Description=Enable the puppet service
              After=docker.service
              Requires=docker.service
              
              [Service]
              ExecStartPre=/bin/bash -c '/usr/bin/docker inspect %n &> /dev/null && /usr/bin/docker rm %n || :'
              ExecStart=/usr/bin/docker run \
                --name %n \
                --net=host \
                --privileged \
                -v /media/staging:/opt/staging \
                -v /:/opt/root:rw \
                -v /etc/systemd:/etc/systemd \
                -v /etc/puppet:/etc/puppet \
                -v /var/lib/puppet:/var/lib/puppet \
                -v /home/core:/home/core \
                -v /etc/os-release:/etc/os-release:ro \
                -v /etc/lsb-release:/etc/lsb-release:ro \
                -v /etc/coreos:/etc/coreos:rw \
                -v /run:/run:ro \
                -v /usr/bin/systemctl:/usr/bin/systemctl:ro \
                -v /lib64:/lib64:ro \
                -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
                -v /etc/puppet/puppet.conf:/etc/puppet/puppet.conf:ro \
                -v /dev/ipmi0:/dev/ipmi0 \
                epflsti/cluster.coreos.puppet:latest \
                agent --no-daemonize --logdest=console --environment=production
              RestartSec=5s
              Restart=always
            
              [Install]
              WantedBy=multi-user.target
          - name: ethbr4.netdev
            content: |
              [NetDev]
              Name=ethbr4
              Kind=bridge
          - name: 50-ethbr4-internal.network
            content: |
              # Network configuration of ethbr4 for an internal node.
              # Overridden by 40-ethbr4-nogateway.network when that
              # symlink exists.
              [Match]
              Name=ethbr4

              [Network]
              Address=<%= @host.ip %>/24
              Gateway=<%= @host.params['gateway_vip'] %>
              DNS=<%= @host.params['dns_vip'] %>
          - name: 00-<%= @host.primary_interface.identifier %>.network
            content: |
              [Match]
              Name=<%= @host.primary_interface.identifier %>

              [Network]
              DHCP=no
              Bridge=ethbr4
          - name: systemd-networkd.service
            command: stop
          - name: cleanup-DHCP-assigned-addresses.service
            runtime: true
            command: start
            content: |
              [Service]
              Type=oneshot
              ExecStart=/usr/bin/ip addr flush dev <%= @host.primary_interface.identifier %>
          - name: systemd-networkd.service
            command: start
          - name: puppet-certreq.service
            runtime: true
            content: |
              [Unit]
              Description=Register a certificate with the Puppetmaster
              After=puppet.service system-networkd.service
              Requires=puppet.service
              [Service]
              Type=oneshot
              ExecStart=/usr/bin/docker exec -it puppet.service puppet agent -t
      write_files:
          - path: /etc/systemd/network/40-ethbr4-nogateway.opt-network
            content: |
              # Network configuration for ethbr4 without a default route.
              # Overrides 50-ethbr4-internal.network on gateway nodes.
              [Match]
              Name=ethbr4

              [Network]
              Address=<%= @host.ip %>/24
              DNS=<%= @host.params['dns_vip'] %>
<% if @host.params['ssh_authorized_keys'] -%>
      ssh_authorized_keys:
  <% @host.params['ssh_authorized_keys'].split(',').map(&:strip).each do |ssh_key| -%>
      - "<%= ssh_key %>"
  <% end -%>
<% else -%>
      users:
        - name: core
          passwd: <%= root_pass %>
<% end -%>
