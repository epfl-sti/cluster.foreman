#!/bin/bash
#
# Like jpetazzo/pipework.git, except it does nothing on the host side;
# just make an interface appear with the right name and IP in the guest.
#
# Usage: pipework-dummy <guest>

GUESTNAME=$1
IPADDR=$2
CONTAINER_IFNAME=${CONTAINER_IFNAME:-eth1}

RETRIES=3
DOCKERPID_OK=
while [ "$RETRIES" -gt 0 ]; do
  DOCKERPID=$(docker inspect --format='{{ .State.Pid }}' "$GUESTNAME")
  [ "$DOCKERPID" != 0 ] && [ "$DOCKERPID" != "" ] && {
      DOCKERPID_OK=y
      break
  }
  sleep 1
  RETRIES=$((RETRIES - 1))
done
[ -z "$DOCKERPID_OK" ] && exit 1

NSPID="$DOCKERPID"
rm -f "/var/run/netns/$NSPID"
trap "rm -f '/var/run/netns/$NSPID'" EXIT HUP TERM
ln -s "/proc/$NSPID/ns/net" "/var/run/netns/$NSPID"

# It really doesn't matter which type of interface we use; it seems that
# "bridge" is just the least finicky of them.
ip netns exec "$NSPID" ip link add name "$CONTAINER_IFNAME" type bridge
ip netns exec "$NSPID" ip addr add "$IPADDR" dev "$CONTAINER_IFNAME"
ip netns exec "$NSPID" ip link set "$CONTAINER_IFNAME" up

