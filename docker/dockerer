#!/usr/bin/perl -w

use strict;

=head1 NAME

dockerer - Build and run the things under docker/

=head1 SYNOPSIS

   dockerer plan
   dockerer build [--scratch|--saved=<tarname>]
   dockerer run <clustername>
   dockerer backup <clustername>

Where C<target> is one of "foreman-base" or "foreman"

=head1 DESCRIPTION

Dockerer runs docker, as the name implies, and also handles the moving
parts that are close by (specifically, networking and persistent data).

=head2 Plan

The "plan" phase consists of downloading as much things as can be. The
result is a Docker image called C<epflsti/foreman-base> that has no
personalization built-in and can be re-used in any number of clusters,
uploaded to a private Docker registry and so on.

=head2 Build

The "build" phase consists of personalizing the "plan" image to suit a
particular cluster and network environment. Personalization
information comes from the previous image if any, and the
C<foreman-installer-answers.yaml> file produced by C<../configure.pl>.
The result is an image called epflsti/foreman-$FQDN, where $FQDN is
the fully-qualified host name of the Foreman instance (as seen from
within the container's own DNS server).

=head2 Run

The "run" phase consists of instantiating epflsti/foreman-$FQDN and
 running supervisord inside the container so created.

=head2 Data Upgrade

Unless the C<--scratch> flag is passed, the L</Build> operation
attempts to save and re-use the data of any existing, L</Run>ning
Docker container.

=cut

use FindBin qw($Bin);
use lib "$Bin/../lib";
use autodie qw(:all);
use Try::Tiny;
use Docopt;
use Pod::Usage;
use POSIX qw(strftime getcwd);
use EPFLSTI::Interactive;

chdir("$Bin/..");

our $opts;
try {
  $opts = docopt();
} catch {
  pod2usage();
};

if ($opts->{plan}) {
  plan();
} elsif ($opts->{build}) {
  build(Foreman->load());
} elsif ($opts->{run}) {
  run(Foreman->load($opts->{'<clustername>'}));
} elsif ($opts->{backup}) {
  backup(Foreman->load($opts->{'<clustername>'}));
} else {
  pod2usage();
}

sub plan {
  system("cd '$Bin/foreman-base' && docker build -t epflsti/foreman-base .");
}

sub build {
  my ($foreman) = @_;
  plan();
  my $answers_yaml = "$Bin/../foreman-installer-answers.yaml";

  my $tarname_to_restore="";
  if ($opts->{"--saved"}) {
    die "--saved must be a relative path (no slashes)" if
      ($opts->{"--saved"} =~ m|/|);
    $tarname_to_restore = $opts->{"--saved"};
    die "File does not exist: $tarname_to_restore" unless (-f $tarname_to_restore);
  } elsif ($foreman->container_exists) {
    $tarname_to_restore = backup($foreman);
    system("set -x; tar --to-stdout -xvf $tarname_to_restore etc/foreman/foreman-installer-answers.yaml > foreman-installer-answers.yaml");
    system("./configure.pl");
  } elsif (! -f $answers_yaml) {
    system("./configure.pl");
  }

  my @shellvars = ($Bin,
                   $foreman->cluster_name(),
                   $foreman->container_name(), $foreman->image_name(),
                   $foreman->vip(), $foreman->main_netmask(), $tarname_to_restore);
  system(sprintf(<<'DOCKER_PERSONALIZE', @shellvars));
Bin=%s
clustername=%s
container_name=%s
image_name=%s
foreman_ipaddr=%s
foreman_netmask=%s
set -e -x
docker rm -f $container_name-INITIAL >/dev/null 2>&1 || true

(for try in $(seq 1 6); do \
 $Bin/scripts/pipework-dummy $container_name-INITIAL $foreman_ipaddr/$foreman_netmask && break; \
 sleep 5; done) &
docker run --name=$container_name-INITIAL -h $container_name \
    -v "$Bin/..":/cluster.foreman \
    --label=ch.epfl.sti.foreman.built_for_clustername=$clustername \
    -it epflsti/foreman-base \
    bash -c 'tarname="%s"; set -e -x; /usr/local/bin/pipework --wait -i eth1 && \
             . /cluster.foreman/docker/scripts/build'

containerid=$(docker ps -q -a \
  --filter="label=ch.epfl.sti.foreman.built_for_clustername=$clustername" \
  | head -1)
imageid=$(docker commit $containerid)
containerid2=$(docker create --entrypoint=/usr/bin/supervisord $imageid)
docker commit $containerid2 $image_name
DOCKER_PERSONALIZE
}

sub run {
  my ($foreman) = @_;

  my $cluster_name = $foreman->cluster_name();
  my $container_name = $foreman->container_name();
  my $image_name = $foreman->image_name();

  if (my $container_details = $foreman->container_details) {
    my $container_created = $container_details->[0]->{Created};
    my $image_created = $foreman->image_details->[0]->{Created};
    if ($image_created ge $container_created) {
      return unless prompt_yn(<<"CONFIRM");

About to upgrade to image $image_name, created
$image_created.

All changes in the running instance since last "dockerer backup" or
"dockerer build" will be lost.

Are you sure?
CONFIRM
      system("docker rm -f $container_name || true");
    } elsif (! $foreman->container_running) {
      warn <<"MESSAGE";

Restarting container $container_name

MESSAGE
      system(<<"BRIDGE_AND_DOCKER_START");
set -e -x
docker start $container_name
BRIDGE_AND_DOCKER_START
      do_pipework($foreman);
      return;
    } else {
      warn "Container $container_name is already running.\n";
      return;
    }
  }

  do_pipework($foreman, "async");
  system(<<"BRIDGE_AND_DOCKER_RUN");
set -e -x
docker run -it --volumes-from=$container_name-INITIAL \\
    --name=$container_name -h $container_name \\
    --dns=127.0.0.1 \\
    $image_name
BRIDGE_AND_DOCKER_RUN
}

sub backup {
  my ($foreman) = @_;
  my $container_name = $foreman->container_name();

  my $date = strftime("%Y%m%d%H%M%S", localtime(time));
  my $tarname = "backup-${container_name}-$date.tar";
  # https://stackoverflow.com/questions/21597463
  # Keep the backup list in sync with scripts/build and the Dockerfile
  system("set -x; docker run -i --rm --volumes-from $container_name \\
            -v \$(pwd):/backup busybox \\
            tar cf - /var/lib/puppet /var/lib/postgresql \\
                   /var/lib/dhcp /var/lib/tftpboot \\
                   /var/cache/bind /etc/puppet /etc/foreman /etc/foreman-proxy \\
                   /usr/share/foreman/config \\
                   /usr/share/foreman/app/helpers/ipmi_helper.rb \\
                   /usr/share/foreman/app/views/ipmi \\
                   /usr/share/foreman/app/controllers/ipmi_controller.rb \\
                   /usr/share/foreman/app/assets/stylesheets/ipmi.css \\
                   /usr/share/foreman/app/assets/javascripts/ipmi.js \\
                   /root/.bash_history > $tarname ||true");
  warn("Backup saved as " . getcwd() . "/$tarname\n");
  return $tarname;
}

# Ensuring that ->private_ipv4_bridge_name() is set up correctly is
# done by Puppet (in fully operational mode) and by configure.pl
# (during install). TODO: This whole thing is just ugly.
sub do_pipework {
  my ($foreman, $is_async) = @_;
  my $container_name = $foreman->container_name();
  my $foreman_ipaddr = $foreman->vip();
  my $main_netmask = $foreman->main_netmask();
  my $foreman_ipmi_alias_ipaddr = $foreman->ipmi_alias_vip();
  my $foreman_ipmi_alias_netmask = $foreman->ipmi_alias_netmask();
  my $bridgename = $foreman->private_ipv4_bridge_name();

  my $cmd_core = <<"PIPEWORK_FOREMAN_VIP";
$Bin/foreman-base/pipework/pipework $bridgename \\
         $container_name $foreman_ipaddr/$main_netmask
PIPEWORK_FOREMAN_VIP
  $cmd_core .= <<"PIPEWORK_IPMI_VIP";
$Bin/foreman-base/pipework/pipework $bridgename -i eth2 \\
         $container_name $foreman_ipmi_alias_ipaddr/$foreman_ipmi_alias_netmask
PIPEWORK_IPMI_VIP
  my $dns_vip = $foreman->dns_vip();
  if (defined $dns_vip) {
    # Alias eth1 to $dns_vip; unfortunately, pipework cannot be used.
    $cmd_core .= <<"ALIAS_DNS_VIP";
DOCKERPID=\$(docker inspect --format='{{ .State.Pid }}' "$container_name")
ln -sf "/proc/\$DOCKERPID/ns/net" "/var/run/netns/\$DOCKERPID"
ip netns exec \$DOCKERPID ip addr add "$dns_vip"/"$foreman_ipmi_alias_netmask" dev eth1
rm -f "/var/run/netns/\$DOCKERPID"
ALIAS_DNS_VIP
  }

  if (! $is_async) {
    system("set -e -x\n" . $cmd_core);
  } else {
    system(<<"DO_PIPEWORK_ASYNC");
set -e -x
for try in \$(seq 1 6); do
  (
    $cmd_core
  ) && break
sleep 5
done &
DO_PIPEWORK_ASYNC
  }
}

package Foreman;

use Net::Domain qw(hostdomain);
use JSON;
use YAML::Tiny;

sub load {
  my ($class, $clustername) = @_;
  my $self = bless {}, $class;
  if (! $clustername) {
    $clustername = $self->_configure_answer("cluster_domain_name");
    if (! $clustername) {
      system("./configure.pl");
      delete $self->{yaml_config};
      $clustername = $self->_configure_answer("cluster_domain_name");
    }
  }
  if (! $clustername) {
    die "Unable to figure out cluster name!";
  }
  if ($clustername !~ m/\./) {
    $clustername .= "." . hostdomain;
  }
  $self->{clustername} = $clustername;
  return $self;
}

sub cluster_name { shift->{clustername} }

sub container_name {
  my ($self) = @_;
  my $clustername = $self->cluster_name();
  return "puppetmaster.$clustername";
}

sub image_name {
  my ($self) = @_;
  my $container_name = $self->container_name();
  return "epflsti/foreman-$container_name";
}

sub container_exists {
  my ($self) = @_;

  my $container_name = $self->container_name;
  return `docker ps -a -q --filter='name=$container_name' |head -1`;
}

sub container_running {
  my ($self) = @_;
  my $container_name = $self->container_name;
  return try {
    return 0 + qx(docker ps -q --filter='name=$container_name' | wc -l);
  } catch {
    return undef;
  }
}

sub container_details {
  my ($self) = @_;
  return unless (my $id = $self->container_exists);
  return decode_json(scalar(`docker inspect $id`));
}

sub image_details {
  my ($self) = @_;
  my $image_name = $self->image_name();
  return decode_json(scalar(`docker inspect $image_name`));
}

sub yaml_config_path { "./foreman-installer-answers.yaml" }

sub yaml_config {
  my ($self) = @_;
  $self->{yaml_config} ||= $self->_load_yaml_config();
}

sub _load_yaml_config {
  my ($self) = @_;
  return YAML::Tiny->read($self->yaml_config_path)->[0];
}

sub _configure_answer {
  my ($self, $key) = @_;
  return $self->yaml_config->{epflsti}->{interactive_answers}->{$key};
}

sub vip { shift->_configure_answer("puppetmaster_vip") }
sub main_netmask { shift->_configure_answer("main_netmask") }

sub private_ipv4_bridge_name {
  shift->_configure_answer("physical_internal_bridge")
}

sub ipmi_alias_vip { shift->_configure_answer("ipmi_vip") }
sub dns_vip { shift->_configure_answer("dns_vip") }
sub ipmi_alias_netmask { shift->_configure_answer("ipmi_netmask") }


